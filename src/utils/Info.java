package utils;

public class Info {
	/**
	 * @author LeMeshCloudDev
	 *测试范型的使用，为了解决商品显示页面
	 *能同时展示出商品信息，固件信息以及工艺
	 *说明等信息。
	 *关于商品信息以及商品信息的固件信息
	 *以及其商品信息的工艺说明等一起展示
	 *问题，根据范型解决该问题。
	 *2020/09/23 songlj
	 *下午的目标：
	 *1.法律法规问题
	 *2.企业信息改为账号信息
	 *3.增值税专用发票
	 *------------后续问题的修改与完善------------
	 *1.地址管理（修改、删除功能、设为默认地址）
	 *2.企业管理（密码更改问题、公司名称不可改问题）
	 *2020/09/28 记录 songlj 16：01PM
	 *--------------------已经解决---------------------------
	 */
	/*************分割线**************/	
	/**
	 * 2020/09/28 songlj PM14：23
	 * 对提出的需求进行分析与剖解
	 * ①固件信息的显示，将其进行封装和商品信息一起显示
	 * ②工艺信息的显示，将其进行封装和商品信息进行一起显示
	 * ③固件信息进行变更问题，发生变更则让客户进行样品确认书
	 * 		下载，然后对下载好的样品确认书进行签字，签完字后，由
	 * 		客户进行上传，上传后由管理员进行审核。固件信息如果没
	 * 		发生改变，则直接进行下单。
	 * ④预订单界面还有地址进行选择，编辑，以及发票进行选择与编辑
	 * ⑤订单列表界面的细化，历史订单
	 * ⑥订单详情页流程细化
	 * 关于shoppinginfo（商品信息）、gujian（固件信息）以及craft（工艺说明）
	 * 在同一个页面显示问题,数据结构分析：
	 * 		数据结构分析：（商品信息给页面的数据是一个List集合List<shopping>shoppings=new ArrayList<shopping>();
	 * 而固件信息根据给页面的是根据商品信息object shopping得来的固件信息，固件信息在前端是多个与
	 * 商品信息类相关联的类可以通过HashMap来获取其值Map<String,gujian>,其中的String类型为key，
	 * 该key在前端展示可以用到el表达式拼接字符串技术。通过该key，获取固件对象gujian，然后在前端展示
	 * 也是通过该key得到相应的固件对象。同样工艺信息也是通过上面的方法得到工艺说明的object对象
	 * 两个Map，一个存入固件信息的map
	 * 一个存入工艺说明的Map对象，根据Map来获取当前商品信息的的工艺说明
	 * 前面说的el表达式拼接可以不进行拼接）。
	 * 三方面：商品信息(List<shoppingInfo>)、固件信息(Map<String,gujian>)、工艺说明Map<String,Map<String,Obj>>
	 * 统一在商品信息显示页面将该几种数据结构显示出来。
	 * 其中涉及到的servlet类有shoppingInfoManageServlet，ShowShoppingInfoServlet这两个类
	 * 其中的action为list处理，将商品信息list传入前端
	 * 将这个修改为不仅仅是List数据信息，还有以上的固件信息和工艺信息。
	 * 2020/09/29 PM 10：27shoppingInfoManageServlet这个类用于用户，而ShowShoppingInfoServlet是用于管理员那边的。
	 */
	/**
	 * 2020/10/07 17：37PM songlj 
	 * 关于进行采购需要的后续操作
	 * ①购买意向清单页面（原购物车的界面）设计
	 * ②订单列表页面（原订单列表页面）设计
	 * ③订单详情界面（原来并没有）设计
	 * 以上不仅仅是要对其进行页面重新设计，更加
	 * 深入的是需要对其数据看进行重新设计，即数据库设计与原来的数据库设计完全不符，
	 * 其原因是需求分析阶段，需求获取没获取全面，需求获取不够明确，另一方面就是当时给需求的一方（甲方）
	 * 自己也不太明确需求，即他自己对自己想要开发的系统是什么样子的自己也不太清楚。所有在需求获取阶段
	 * 就要尽可能的与给需求一方互动起来，尽可能的挖掘出其需求，无论是当前的需求还是隐含的需求，尽可能的
	 * 考虑全面，尽可能的想的多，最最最重要的是获取得到的需求是正确的，符合需求给予方的需求，如果需求给予
	 * 方对其自己的需求也很含糊，那就需要一起对含糊的需求进行明确。
	 * 此外，系统的可拓展性是建立在需求明确之后，需求没明确的话后面的工作开展及其大部分是白做的即根据自己的
	 * 想法造自己的系统，而不是根据需求给出者的需求造他想要的系统/软件。系统的可拓展性是考虑了明确的需求之后然后
	 * 尽可能多的为系统考虑，考虑的地方可以是未来可能遇到的问题，可以是未给出的隐含需求。但唯一的前提是它必须先
	 * 建立在已给出且明确的需求之后。
	 * 2020/10/08需要进行的任务有，先明确需求，然后再进行上面的①②③步。
	 * 然后将那些搞定了之后，在进行固件版本发生改变之后样品确认书用户上传及下载等后续操作。
	 */
}

